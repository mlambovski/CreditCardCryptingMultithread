/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project61592;

import com.thoughtworks.xstream.XStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Formatter;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * The Server class provides part of the server's functionality - creating the
 * server socket, creating a thread for a connecting client to be handled by the
 * ClientHandler class, in which resides the rest of the server functionality.
 */
public class Server extends javax.swing.JFrame {

    /**
     * The {@link ServerSocket} instance that represents the server's socket.
     */
    private ServerSocket server;
    /**
     * Represents a cached thread pool used for handling the connecting clients.
     */
    private ExecutorService threadPool;
    /**
     * The {@link XStream} instance that is used to serialize instances of the
     * {@link User} class to xml.
     */
    private XStream xstream;

    /**
     * An {@link ArrayList} instance that contains {@link CreditCard} objects.
     */
    private ArrayList<CreditCard> encryptedCards;
    /**
     * The {@link Formatter} isntance that is used to write the value of
     * encryptedCards to a .txt file.
     */
    private Formatter output;
    /**
     * The {@link FileOutputStream} isntance that is used to write the list of
     * users to a .xml file.
     */
    private FileOutputStream fos = null;

    /**
     * Creates new form Server. Initializes the class properties except server
     * and output, which are initialized in separate methods.
     */
    public Server() {
        initComponents();
        threadPool = Executors.newCachedThreadPool();
        xstream = new XStream();
        xstream.alias("user", User.class);
        xstream.alias("users", Users.class);
        xstream.addImplicitCollection(Users.class, "users");
        encryptedCards = new ArrayList<>();
    }

    /**
     * Starts the server by creating an instance of {@link ServerSocket} with
     * port 12345 and maximum load 100. It executes in an endless loop the
     * waiForConnection() method.
     */
    public void runServer() {
        try {
            server = new ServerSocket(12345, 100);
            while (true) {
                waitForConnection();
            }
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Waits for a connection from a client. After the client is connected
     * outputs in the server graphical interface that a connection is accepted
     * and passes that connection to a {@link ClientHandler} instance to be
     * handled.
     *
     * @throws IOException
     */
    private void waitForConnection() throws IOException {
        Socket connection = server.accept();
        txtArea.append("Connection accepted!\n");
        threadPool.execute(new ClientHandler(connection, this));
    }

    /**
     * Used to retrieve the list of registered users.
     *
     * @return {@link ArrayList} isntance of the registered users.
     */
    public synchronized Users getUsers() {
        xstream.processAnnotations(User.class);
        xstream.processAnnotations(Users.class);
        File file = new File("Users.xml");
        if (file.length() == 0) {
            Users users = new Users();
            users.users = new ArrayList<>();
            return users;
        } else {
            Users users = (Users) xstream.fromXML(file);
            return users;
        }
    }

    /**
     * Adds a {@link CreditCard} instance to the {@link ArrayList} of encrypted
     * cards.
     *
     * @param card A {@link CreditCard} instance to be added.
     */
    public synchronized void addEncryptedCard(CreditCard card) {
        encryptedCards.add(card);
    }

    /**
     * Used to retrieve the {@link ArrayList} of encrypted cards.
     *
     * @return A {@link ArrayList} instance containing all encryted cards.
     */
    public synchronized ArrayList<CreditCard> getEncryptedCards() {
        return new ArrayList<>(encryptedCards);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblAccessLevel = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        btnCreateUser = new javax.swing.JButton();
        btnShowRegisteredUsers = new javax.swing.JButton();
        btnEncryptedSortedToFile = new javax.swing.JButton();
        btnCardSortedToFile = new javax.swing.JButton();
        cmbAccessLevel = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");

        txtArea.setEditable(false);
        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        lblUsername.setText("Username:");

        lblPassword.setText("Password:");

        lblAccessLevel.setText("Access level:");

        btnCreateUser.setText("Create User");
        btnCreateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateUserActionPerformed(evt);
            }
        });

        btnShowRegisteredUsers.setText("Show Registered Users");
        btnShowRegisteredUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowRegisteredUsersActionPerformed(evt);
            }
        });

        btnEncryptedSortedToFile.setText("Print Card Numbers To File(Encrypted Numbers Sorted)");
        btnEncryptedSortedToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptedSortedToFileActionPerformed(evt);
            }
        });

        btnCardSortedToFile.setText("Print Card Numbers To File(Card Numbers Sorted)");
        btnCardSortedToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCardSortedToFileActionPerformed(evt);
            }
        });

        cmbAccessLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "user", "guest" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAccessLevel)
                                .addGap(18, 18, 18)
                                .addComponent(cmbAccessLevel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblUsername)
                                    .addComponent(lblPassword))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnShowRegisteredUsers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCreateUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCardSortedToFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEncryptedSortedToFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAccessLevel)
                    .addComponent(cmbAccessLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCreateUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnShowRegisteredUsers))
                    .addComponent(btnEncryptedSortedToFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCardSortedToFile, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Creates a new {@link User} instance and adds it to the {@link ArrayList}
     * of registered users after serilizing it to XML format.
     *
     */
    private void btnCreateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUserActionPerformed
        String userName = txtUsername.getText();
        String password = txtPassword.getText();
        if (!userName.matches("[0-9a-zA-Z]{3,20}")) {
            txtArea.append("The username must be 0-9, a-z or A-Z"
                    + " and must be between 3 and 20 characters long!\n");
        } else if (!password.matches("[0-9a-zA-Z]{3,20}")) {
            txtArea.append("The password must be 0-9, a-z or A-Z"
                    + " and must be between 3 and 20 characters long!\n");
        } else {
            txtArea.append("New user registered!\n");
            try {
                Users users = getUsers();
                fos = new FileOutputStream("Users.xml");
                users.users.add(new User(userName, password, (String) cmbAccessLevel.getSelectedItem()));
                byte[] bytes = xstream.toXML(users).getBytes();
                fos.write(bytes);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (fos != null) {
                    try {
                        fos.close();
                    } catch (IOException ex) {
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnCreateUserActionPerformed
    /**
     * Displays in the server's graphical user interface the registered users.
     */
    private void btnShowRegisteredUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowRegisteredUsersActionPerformed
        txtArea.append("Registered users:\n");
        Users users = getUsers();
        for (int i = 0; i < users.users.size(); i++) {
            txtArea.append(String.format("%s%n", users.users.get(i)));
        }
    }//GEN-LAST:event_btnShowRegisteredUsersActionPerformed
    /**
     * Sorts the {@link ArrayList} of encrypted cards according to the encrypted
     * number of the {@link CreditCard} object, using a {@link Comparator}
     * lambda expression and writes the data to "encryptedNumberSorted.txt".
     */
    private void btnCardSortedToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCardSortedToFileActionPerformed
        Collections.sort(encryptedCards,
                (card1, card2) -> card1.getEncryptedNumber().compareTo(card2.getEncryptedNumber()));
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-30s %-30s %-30s%n%n",
                "Encrypted Card number", "Card number", "Cipher"));
        for (CreditCard card : encryptedCards) {
            sb.append(String.format("%-30s %-30s %-30s%n",
                    card.getEncryptedNumber(),
                    card.getCardNumber(),
                    card.getCipher()));
        }
        try {
            output = new Formatter("encryptedNumberSorted.txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        output.format("%s", sb.toString());
        if (output != null) {
            output.close();
        }
    }//GEN-LAST:event_btnCardSortedToFileActionPerformed
    /**
     * Sorts the {@link ArrayList} of encrypted cards according to the card
     * number of the {@link CreditCard} object, using a {@link Comparator}
     * lambda expression and writes the data to "cardNumberSorted.txt".
     */
    private void btnEncryptedSortedToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptedSortedToFileActionPerformed
        Collections.sort(encryptedCards,
                (card1, card2) -> card1.getCardNumber().compareTo(card2.getCardNumber()));
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-30s %-30s %-30s%n%n",
                "Card number", "Encrypted Card number", " Cipher"));
        for (CreditCard card : encryptedCards) {
            sb.append(String.format("%-30s %-30s %-30s%n",
                    card.getCardNumber(),
                    card.getEncryptedNumber(),
                    card.getCipher()));
        }
        try {
            output = new Formatter("cardNumberSorted.txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        output.format("%s", sb.toString());
        if (output != null) {
            output.close();
        }
    }//GEN-LAST:event_btnEncryptedSortedToFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Server().setVisible(true);
//            }
//        });
        Server server = new Server();
        server.setVisible(true);
        server.runServer();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCardSortedToFile;
    private javax.swing.JButton btnCreateUser;
    private javax.swing.JButton btnEncryptedSortedToFile;
    private javax.swing.JButton btnShowRegisteredUsers;
    private javax.swing.JComboBox cmbAccessLevel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAccessLevel;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
